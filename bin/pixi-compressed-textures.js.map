{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/CompressedImage.js","src/CompressedTextureManager.js","src/GLTextureMixin.js","src/extensionChooser.js","src/extensionFixer.js","src/imageParser.js","src/index.js"],"names":[],"mappingsxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-compressed-textures.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CompressedImage(src, data, type, width, height, levels, internalFormat) {\r\n    CompressedImage.prototype.init.apply(this, arguments);\r\n}\r\n\r\nmodule.exports = CompressedImage;\r\n\r\nCompressedImage.prototype.init = function(src, data, type, width, height, levels, internalFormat) {\r\n    this.src = src;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.data = data;\r\n    this.type = type;\r\n    this.levels = levels;\r\n    this.internalFormat = internalFormat;\r\n    this.isCompressedImage = true;\r\n\r\n    var oldComplete = this.complete;\r\n    this.complete = !!data;\r\n    if (!oldComplete && this.complete && this.onload) {\r\n        this.onload( { target: this } );\r\n    }\r\n    return this;\r\n};\r\n\r\nCompressedImage.prototype.dispose = function() {\r\n    this.data = null;\r\n};\r\n\r\nCompressedImage.prototype.generateWebGLTexture = function (gl, preserveSource) {\r\n    if (this.data === null) {\r\n        throw \"Trying to create a second (or more) webgl texture from the same CompressedImage : \" + this.src;\r\n    }\r\n\r\n    var width = this.width;\r\n    var height = this.height;\r\n    var levels = this.levels;\r\n    var offset = 0;\r\n    // Loop through each mip level of compressed texture data provided and upload it to the given texture.\r\n    for (var i = 0; i < this.levels; ++i) {\r\n        // Determine how big this level of compressed texture data is in bytes.\r\n        var levelSize = textureLevelSize(this.internalFormat, width, height);\r\n        // Get a view of the bytes for this level of DXT data.\r\n        var dxtLevel = new Uint8Array(this.data.buffer, this.data.byteOffset + offset, levelSize);\r\n        // Upload!\r\n        gl.compressedTexImage2D(gl.TEXTURE_2D, i, this.internalFormat, width, height, 0, dxtLevel);\r\n        // The next mip level will be half the height and width of this one.\r\n        width = width >> 1;\r\n        if (width < 1)\r\n            width = 1;\r\n        height = height >> 1;\r\n        if (height < 1)\r\n            height = 1;\r\n        // Advance the offset into the compressed texture data past the current mip level's data.\r\n        offset += levelSize;\r\n    }\r\n\r\n    // We can't use gl.generateMipmaps with compressed textures, so only use\r\n    // mipmapped filtering if the compressed texture data contained mip levels.\r\n    if (levels > 1) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n    }\r\n    else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    // Cleaning the data to save memory. NOTE : BECAUSE OF THIS WE CANNOT CREATE TWO GL TEXTURE FROM THE SAME COMPRESSED IMAGE !\r\n    if (!preserveSource)\r\n        this.data = null;\r\n};\r\n\r\n/**\r\n * Charge une image compressée depuis un array buffer\r\n * @param arrayBuffer : le buffer à partir duquel charger l'image\r\n * @return la CompressedImage chargée\r\n */\r\nCompressedImage.loadFromArrayBuffer = function (arrayBuffer, src) {\r\n    return new CompressedImage(src).loadFromArrayBuffer(arrayBuffer);\r\n};\r\n\r\nCompressedImage.prototype.loadFromArrayBuffer = function(arrayBuffer) {\r\n    var head = new Uint8Array(arrayBuffer, 0, 3);\r\n\r\n    //todo: implement onload\r\n\r\n    if (head[0] == \"DDS\".charCodeAt(0) && head[1] == \"DDS\".charCodeAt(1) && head[2] == \"DDS\".charCodeAt(2))\r\n        return this._loadDDS(arrayBuffer);\r\n    else if (head[0] == \"PVR\".charCodeAt(0) && head[1] == \"PVR\".charCodeAt(1) && head[2] == \"PVR\".charCodeAt(2))\r\n        return this._loadPVR(arrayBuffer);\r\n    else\r\n        throw \"Compressed texture format is not recognized: \" + src;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Charge une image compressГ©e au format DDS depuis un array buffer\r\n * @param arrayBuffer : le buffer Г  partir duquel charger l'image\r\n * @return la CompressedImage chargГ©e\r\n */\r\nCompressedImage.prototype._loadDDS = function(arrayBuffer) {\r\n    // Get a view of the arrayBuffer that represents the DDS header.\r\n    var header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n\r\n    // Do some sanity checks to make sure this is a valid DDS file.\r\n    if (header[DDS_HEADER_MAGIC] != DDS_MAGIC)\r\n        throw \"Invalid magic number in DDS header\";\r\n\r\n    if (!header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC)\r\n        throw \"Unsupported format, must contain a FourCC code\";\r\n\r\n    // Determine what type of compressed data the file contains.\r\n    var fourCC = header[DDS_HEADER_PF_FOURCC];\r\n    var internalFormat;\r\n    switch (fourCC) {\r\n        case FOURCC_DXT1:\r\n            internalFormat = COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n            break;\r\n        case FOURCC_DXT3:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n            break;\r\n        case FOURCC_DXT5:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n            break;\r\n        case FOURCC_ATC:\r\n            internalFormat = COMPRESSED_RGB_ATC_WEBGL;\r\n            break;\r\n        case FOURCC_ATCA:\r\n            internalFormat = COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL;\r\n            break;\r\n        case FOURCC_ATCI:\r\n            internalFormat = COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;\r\n            break;\r\n        default:\r\n            throw \"Unsupported FourCC code: \" + int32ToFourCC(fourCC);\r\n    }\r\n\r\n    // Determine how many mipmap levels the file contains.\r\n    var levels = 1;\r\n    if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n        levels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n    }\r\n\r\n    // Gather other basic metrics and a view of the raw the DXT data.\r\n    var width = header[DDS_HEADER_WIDTH];\r\n    var height = header[DDS_HEADER_HEIGHT];\r\n    var dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n    var dxtData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n    return this.init(this.src, dxtData, 'DDS', width, height, levels, internalFormat);\r\n};\r\n\r\n/**\r\n * Charge une image compressГ©e au format PVR depuis un array buffer\r\n * @param arrayBuffer : le buffer Г  partir duquel charger l'image\r\n * @return la CompressedImage chargГ©e\r\n */\r\nCompressedImage.prototype._loadPVR = function(arrayBuffer) {\r\n    // Get a view of the arrayBuffer that represents the DDS header.\r\n    var header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n\r\n    // Do some sanity checks to make sure this is a valid DDS file.\r\n    if (header[PVR_HEADER_MAGIC] != PVR_MAGIC)\r\n        throw \"Invalid magic number in PVR header\";\r\n\r\n    // Determine what type of compressed data the file contains.\r\n    var format = header[PVR_HEADER_FORMAT];\r\n    var internalFormat;\r\n    switch (format) {\r\n        case PVR_FORMAT_2BPP_RGB:\r\n            internalFormat = COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_2BPP_RGBA:\r\n            internalFormat = COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_4BPP_RGB:\r\n            internalFormat = COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_4BPP_RGBA:\r\n            internalFormat = COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_ETC1:\r\n            internalFormat = COMPRESSED_RGB_ETC1_WEBGL;\r\n            break;\r\n        case PVR_FORMAT_DXT1:\r\n            internalFormat = COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n            break;\r\n        case PVR_FORMAT_DXT3:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n            break;\r\n        case PVR_FORMAT_DXT5:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n            break;\r\n        default:\r\n            throw \"Unsupported PVR format: \" + format;\r\n    }\r\n\r\n    // Gather other basic metrics and a view of the raw the DXT data.\r\n    var width = header[PVR_HEADER_WIDTH];\r\n    var height = header[PVR_HEADER_HEIGHT];\r\n    var levels = header[PVR_HEADER_MIPMAPCOUNT];\r\n    var dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n    var pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n    return this.init(this.src, pvrtcData, 'PVR', width, height, levels, internalFormat);\r\n};\r\n\r\n\r\n//============================//\r\n// DXT constants and utilites //\r\n//============================//\r\n\r\n// Utility functions\r\n// Builds a numeric code for a given fourCC string\r\nfunction fourCCToInt32(value) {\r\n    return value.charCodeAt(0) +\r\n        (value.charCodeAt(1) << 8) +\r\n        (value.charCodeAt(2) << 16) +\r\n        (value.charCodeAt(3) << 24);\r\n}\r\n\r\n// Turns a fourCC numeric code into a string\r\nfunction int32ToFourCC(value) {\r\n    return String.fromCharCode(\r\n        value & 0xff,\r\n        (value >> 8) & 0xff,\r\n        (value >> 16) & 0xff,\r\n        (value >> 24) & 0xff\r\n    );\r\n}\r\n\r\n// Calcualates the size of a compressed texture level in bytes\r\nfunction textureLevelSize(format, width, height) {\r\n    switch (format) {\r\n        case COMPRESSED_RGB_S3TC_DXT1_EXT:\r\n        case COMPRESSED_RGB_ATC_WEBGL:\r\n        case COMPRESSED_RGB_ETC1_WEBGL:\r\n            return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n\r\n        case COMPRESSED_RGBA_S3TC_DXT3_EXT:\r\n        case COMPRESSED_RGBA_S3TC_DXT5_EXT:\r\n        case COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:\r\n        case COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:\r\n            return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n\r\n        case COMPRESSED_RGB_PVRTC_4BPPV1_IMG:\r\n        case COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:\r\n            return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n\r\n        case COMPRESSED_RGB_PVRTC_2BPPV1_IMG:\r\n        case COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:\r\n            return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n// DXT formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\nvar COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\nvar COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\nvar COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\nvar COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n// ATC formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_atc/\r\nvar COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\r\nvar COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\r\nvar COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\r\n\r\n// DXT values and structures referenced from:\r\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\nvar DDS_MAGIC = 0x20534444;\r\nvar DDSD_MIPMAPCOUNT = 0x20000;\r\nvar DDPF_FOURCC = 0x4;\r\n\r\nvar DDS_HEADER_LENGTH = 31; // The header length in 32 bit ints.\r\n\r\n// Offsets into the header array.\r\nvar DDS_HEADER_MAGIC = 0;\r\n\r\nvar DDS_HEADER_SIZE = 1;\r\nvar DDS_HEADER_FLAGS = 2;\r\nvar DDS_HEADER_HEIGHT = 3;\r\nvar DDS_HEADER_WIDTH = 4;\r\n\r\nvar DDS_HEADER_MIPMAPCOUNT = 7;\r\n\r\nvar DDS_HEADER_PF_FLAGS = 20;\r\nvar DDS_HEADER_PF_FOURCC = 21;\r\n\r\n// FourCC format identifiers.\r\nvar FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\nvar FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\nvar FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\nvar FOURCC_ATC = fourCCToInt32(\"ATC \");\r\nvar FOURCC_ATCA = fourCCToInt32(\"ATCA\");\r\nvar FOURCC_ATCI = fourCCToInt32(\"ATCI\");\r\n\r\n//===============//\r\n// PVR constants //\r\n//===============//\r\n\r\n// PVR formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\r\nvar COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\nvar COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\nvar COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\nvar COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\n// ETC1 format, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/\r\nvar COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n\r\nvar PVR_FORMAT_2BPP_RGB = 0;\r\nvar PVR_FORMAT_2BPP_RGBA = 1;\r\nvar PVR_FORMAT_4BPP_RGB = 2;\r\nvar PVR_FORMAT_4BPP_RGBA = 3;\r\nvar PVR_FORMAT_ETC1 = 6;\r\nvar PVR_FORMAT_DXT1 = 7;\r\nvar PVR_FORMAT_DXT3 = 9;\r\nvar PVR_FORMAT_DXT5 = 5;\r\n\r\nvar PVR_HEADER_LENGTH = 13; // The header length in 32 bit ints.\r\nvar PVR_MAGIC = 0x03525650; //0x50565203;\r\n\r\n// Offsets into the header array.\r\nvar PVR_HEADER_MAGIC = 0;\r\nvar PVR_HEADER_FORMAT = 2;\r\nvar PVR_HEADER_HEIGHT = 6;\r\nvar PVR_HEADER_WIDTH = 7;\r\nvar PVR_HEADER_MIPMAPCOUNT = 11;\r\nvar PVR_HEADER_METADATA = 12;\r\n","/**\r\n * Created by Liza on 12.12.2015.\r\n */\r\n\r\nvar core = PIXI,\r\n    CompressedImage = require('./CompressedImage'),\r\n    WebGLManager = core.WebGLManager;\r\n/**\r\n * @class\r\n * @memberof PIXI.compressedTextures\r\n * @extends PIXI.WebGlManager\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this manager works for.\r\n */\r\nfunction CompressedTextureManager(renderer) {\r\n    WebGLManager.call(this, renderer);\r\n}\r\n\r\nCompressedTextureManager.prototype = Object.create(WebGLManager.prototype);\r\nCompressedTextureManager.prototype.constructor = CompressedTextureManager;\r\nmodule.exports = CompressedTextureManager;\r\n\r\ncore.WebGLRenderer.registerPlugin('compressedTextureManager', CompressedTextureManager);\r\n\r\nCompressedTextureManager.prototype.getSupportedExtensions = function () {\r\n    var gl = this.renderer.gl;\r\n    function getExtension(gl, name) {\r\n        var vendorPrefixes = [\"\", \"WEBKIT_\", \"MOZ_\"];\r\n        var ext = null;\r\n        for (var i in vendorPrefixes) {\r\n            ext = gl.getExtension(vendorPrefixes[i] + name);\r\n            if (ext) {\r\n                break;\r\n            }\r\n        }\r\n        return ext;\r\n    }\r\n\r\n    return {\r\n        dxt: getExtension(gl, \"WEBGL_compressed_texture_s3tc\"),\r\n        pvrtc: getExtension(gl, \"WEBGL_compressed_texture_pvrtc\"),\r\n        atc: getExtension(gl, \"WEBGL_compressed_texture_atc\")\r\n    };\r\n};\r\n","var CompressedImage = require('./CompressedImage');\r\nvar GLTexture = PIXI.glCore.GLTexture;\r\n\r\n/**\r\n * @mixin\r\n */\r\nvar GLTextureMixin = {\r\n    uploadNotCompressed: GLTexture.uploadNotCompressed,\r\n    isCompressed: false,\r\n    upload: function(source)\r\n    {\r\n        if (!(source instanceof CompressedImage)) {\r\n            return this.uploadNotCompressed(source);\r\n        }\r\n        this.bind();\r\n\r\n        var gl = this.gl;\r\n\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\r\n\r\n        this.isCompressed = true;\r\n\r\n        source.generateWebGLTexture(gl, true);\r\n    },\r\n\r\n    enableMipmap: function() {\r\n        if (source.isCompressed) {\r\n            return;\r\n        }\r\n        var gl = this.gl;\r\n\r\n        this.bind();\r\n\r\n        this.mipmap = true;\r\n\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n};\r\n\r\nmodule.exports = GLTextureMixin;\r\n","function extensionChooser(supportedExtensions) {\n    supportedExtensions = supportedExtensions || [];\n\n    var imageParser = require('./imageParser')();\n\n    return function (resource, next) {\n        var ext = resource.metadata.choice;\n        if (!ext) {\n            return next();\n        }\n        //let us choose extension!\n        var url = resource.url;\n        if (!resource._defaultUrlChoice) {\n            resource._defaultUrlChoice = url;\n            var k = url.lastIndexOf(\".\");\n            if (k >= 0) {\n                resource._baseUrl = url.substring(0, k);\n            } else {\n                return next();\n            }\n        }\n        for (var i = ext.length - 1; i >= 0; i--) {\n            url = resource._baseUrl + ext[i];\n            var isSupported = false;\n            for (var j = 0; j < supportedExtensions.length; j++) {\n                if (ext[i] === supportedExtensions[j]) {\n                    resource.url = url;\n                    resource.loadType = resource._determineLoadType();\n                    return imageParser(resource, next);\n                }\n            }\n        }\n        return imageParser(resource, next);\n    };\n}\n\nmodule.exports = extensionChooser;\n","var core = PIXI,\r\n    utils = core.utils,\r\n    extensionFixer = require('./CompressedImage');\r\n\r\nfunction textureExtensionFixer(supportedExtensions) {\r\n    return function (resource, next) {\r\n        if (resource.texture && resource._defaultUrlChoice && resource._defaultUrl != resource.url) {\r\n            var texture = resource.texture;\r\n            var baseTexture = texture.baseTexture;\r\n            delete utils.BaseTextureCache[baseTexture.imageUrl];\r\n            delete utils.TextureCache[baseTexture.imageUrl];\r\n            baseTexture.imageUrl = resource._defaultUrlChoice;\r\n            core.utils.BaseTextureCache[baseTexture.imageUrl] = baseTexture;\r\n            core.utils.TextureCache[baseTexture.imageUrl] = texture;\r\n        }\r\n        next();\r\n    };\r\n}\r\n\r\nmodule.exports = textureExtensionFixer;\r\n","var core = PIXI,\n    utils = core.utils,\n    CompressedImage = require('./CompressedImage'),\n    Resource = core.loaders.Resource;\n\nResource.setExtensionXhrType('dds', Resource.XHR_RESPONSE_TYPE.BUFFER);\nResource.setExtensionXhrType('pvr', Resource.XHR_RESPONSE_TYPE.BUFFER);\nResource.setExtensionXhrType('etc1', Resource.XHR_RESPONSE_TYPE.BUFFER);\n\nfunction imageParser() {\n    return function (resource, next) {\n        if (resource.url.indexOf('.dds') != -1 || resource.url.indexOf('.pvr') != -1 || resource.url.indexOf('.etc1') != -1) {\n            var compressedImage = resource.compressedImage || new CompressedImage(resource.url);\n            if (resource.data) {\n                throw \"compressedImageParser middleware must be specified in loader.before() and must have zero resource.data\";\n            }\n            resource.isCompressedImage = true;\n            resource.data = compressedImage;\n            resource.once('complete', function() {\n                resource.isImage = true;\n                compressedImage.loadFromArrayBuffer(resource.data);\n                resource.data = compressedImage;\n            });\n        }\n        next();\n    };\n}\n\nmodule.exports = imageParser;\n","var plugin = {\r\n    CompressedTextureManager: require('./CompressedTextureManager'),\r\n    imageParser: require('./imageParser'),\r\n    extensionChooser: require('./extensionChooser'),\r\n    extensionFixer: require('./extensionFixer'),\r\n    GLTextureMixin: require('./GLTextureMixin'),\r\n    detectExtensions: function (renderer, resolution) {\r\n        var extensions = [];\r\n        if (renderer instanceof PIXI.WebGLRenderer) {\r\n            var data = renderer.plugins.compressedTextureManager.getSupportedExtensions();\r\n            if (data.dxt) extensions.push('.dds');\r\n            if (data.pvrtc) extensions.push('.pvr');\r\n            if (data.atc) extensions.push('.atc');\r\n        } else if (renderer instanceof PIXI.CanvasRenderer) {\r\n            //nothing special for canvas\r\n        }\r\n        //retina or not\r\n        resolution = resolution || renderer.resolution;\r\n        var res = \"@\"+resolution+\"x\";\r\n        var ext = extensions.slice(0);\r\n        while (ext.length > 0) {\r\n            extensions.push(res + ext.pop());\r\n        }\r\n        extensions.push(res + \".png\");\r\n        extensions.push(res + \".jpg\");\r\n        //atlas support @1x @2x @.5x\r\n        extensions.push(res + \".json\");\r\n        extensions.push(res + \".atlas\");\r\n        return extensions;\r\n    }\r\n};\r\n\r\nObject.assign(PIXI.glCore.GLTexture.prototype, plugin.GLTextureMixin);\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(plugin.extensionFixer);\r\nPIXI.loader.use(plugin.extensionFixer());\r\n\r\nmodule.exports = global.PIXI.compressedTextures = plugin;\r\n"],"sourceRoot":"/source/"}