{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/CompressedImage.js","src/CompressedTextureManager.js","src/GLTextureMixin.js","src/extensionChooser.js","src/extensionFixer.js","src/imageParser.js","src/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiCompressedTextures","min","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","CompressedImage","src","data","type","width","height","levels","internalFormat","prototype","init","apply","arguments","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","textureLevelSize","format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","Math","floor","max","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","isCompressedImage","oldComplete","complete","onload","target","dispose","generateWebGLTexture","gl","preserveSource","offset","levelSize","dxtLevel","Uint8Array","buffer","byteOffset","compressedTexImage2D","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","loadFromArrayBuffer","arrayBuffer","head","_loadDDS","_loadPVR","header","Int32Array","DDS_HEADER_LENGTH","DDS_HEADER_MAGIC","DDS_MAGIC","DDS_HEADER_PF_FLAGS","DDPF_FOURCC","fourCC","DDS_HEADER_PF_FOURCC","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ATC","FOURCC_ATCA","FOURCC_ATCI","DDS_HEADER_FLAGS","DDSD_MIPMAPCOUNT","DDS_HEADER_MIPMAPCOUNT","DDS_HEADER_WIDTH","DDS_HEADER_HEIGHT","dataOffset","DDS_HEADER_SIZE","dxtData","PVR_HEADER_LENGTH","PVR_HEADER_MAGIC","PVR_MAGIC","PVR_HEADER_FORMAT","PVR_FORMAT_2BPP_RGB","PVR_FORMAT_2BPP_RGBA","PVR_FORMAT_4BPP_RGB","PVR_FORMAT_4BPP_RGBA","PVR_FORMAT_ETC1","PVR_FORMAT_DXT1","PVR_FORMAT_DXT3","PVR_FORMAT_DXT5","PVR_HEADER_WIDTH","PVR_HEADER_HEIGHT","PVR_HEADER_MIPMAPCOUNT","PVR_HEADER_METADATA","pvrtcData","CompressedTextureManager","renderer","WebGLManager","core","PIXI","Object","create","constructor","WebGLRenderer","registerPlugin","getSupportedExtensions","getExtension","name","vendorPrefixes","ext","dxt","pvrtc","atc","GLTexture","glCore","GLTextureMixin","uploadNotCompressed","isCompressed","upload","source","bind","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","enableMipmap","mipmap","generateMipmap","extensionChooser","supportedExtensions","imageParser","resource","next","metadata","choice","url","_defaultUrlChoice","k","lastIndexOf","_baseUrl","substring","j","loadType","_determineLoadType","textureExtensionFixer","texture","_defaultUrl","baseTexture","utils","BaseTextureCache","imageUrl","TextureCache","indexOf","compressedImage","once","isImage","Resource","loaders","setExtensionXhrType","XHR_RESPONSE_TYPE","BUFFER","plugin","extensionFixer","detectExtensions","resolution","extensions","plugins","compressedTextureManager","push","CanvasRenderer","res","slice","pop","assign","Loader","addPixiMiddleware","loader","use","compressedTextures"],"mappings":"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","file":"pixi-compressed-textures.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CompressedImage(src, data, type, width, height, levels, internalFormat) {\r\n    CompressedImage.prototype.init.apply(this, arguments);\r\n}\r\n\r\nmodule.exports = CompressedImage;\r\n\r\nCompressedImage.prototype.init = function(src, data, type, width, height, levels, internalFormat) {\r\n    this.src = src;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.data = data;\r\n    this.type = type;\r\n    this.levels = levels;\r\n    this.internalFormat = internalFormat;\r\n    this.isCompressedImage = true;\r\n\r\n    var oldComplete = this.complete;\r\n    this.complete = !!data;\r\n    if (!oldComplete && this.complete && this.onload) {\r\n        this.onload( { target: this } );\r\n    }\r\n    return this;\r\n};\r\n\r\nCompressedImage.prototype.dispose = function() {\r\n    this.data = null;\r\n};\r\n\r\nCompressedImage.prototype.generateWebGLTexture = function (gl, preserveSource) {\r\n    if (this.data === null) {\r\n        throw \"Trying to create a second (or more) webgl texture from the same CompressedImage : \" + this.src;\r\n    }\r\n\r\n    var width = this.width;\r\n    var height = this.height;\r\n    var levels = this.levels;\r\n    var offset = 0;\r\n    // Loop through each mip level of compressed texture data provided and upload it to the given texture.\r\n    for (var i = 0; i < this.levels; ++i) {\r\n        // Determine how big this level of compressed texture data is in bytes.\r\n        var levelSize = textureLevelSize(this.internalFormat, width, height);\r\n        // Get a view of the bytes for this level of DXT data.\r\n        var dxtLevel = new Uint8Array(this.data.buffer, this.data.byteOffset + offset, levelSize);\r\n        // Upload!\r\n        gl.compressedTexImage2D(gl.TEXTURE_2D, i, this.internalFormat, width, height, 0, dxtLevel);\r\n        // The next mip level will be half the height and width of this one.\r\n        width = width >> 1;\r\n        if (width < 1)\r\n            width = 1;\r\n        height = height >> 1;\r\n        if (height < 1)\r\n            height = 1;\r\n        // Advance the offset into the compressed texture data past the current mip level's data.\r\n        offset += levelSize;\r\n    }\r\n\r\n    // We can't use gl.generateMipmaps with compressed textures, so only use\r\n    // mipmapped filtering if the compressed texture data contained mip levels.\r\n    if (levels > 1) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n    }\r\n    else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    // Cleaning the data to save memory. NOTE : BECAUSE OF THIS WE CANNOT CREATE TWO GL TEXTURE FROM THE SAME COMPRESSED IMAGE !\r\n    if (!preserveSource)\r\n        this.data = null;\r\n};\r\n\r\n/**\r\n * Charge une image compressée depuis un array buffer\r\n * @param arrayBuffer : le buffer à partir duquel charger l'image\r\n * @return la CompressedImage chargée\r\n */\r\nCompressedImage.loadFromArrayBuffer = function (arrayBuffer, src) {\r\n    return new CompressedImage(src).loadFromArrayBuffer(arrayBuffer);\r\n};\r\n\r\nCompressedImage.prototype.loadFromArrayBuffer = function(arrayBuffer) {\r\n    var head = new Uint8Array(arrayBuffer, 0, 3);\r\n\r\n    //todo: implement onload\r\n\r\n    if (head[0] == \"DDS\".charCodeAt(0) && head[1] == \"DDS\".charCodeAt(1) && head[2] == \"DDS\".charCodeAt(2))\r\n        return this._loadDDS(arrayBuffer);\r\n    else if (head[0] == \"PVR\".charCodeAt(0) && head[1] == \"PVR\".charCodeAt(1) && head[2] == \"PVR\".charCodeAt(2))\r\n        return this._loadPVR(arrayBuffer);\r\n    else\r\n        throw \"Compressed texture format is not recognized: \" + src;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Charge une image compressГ©e au format DDS depuis un array buffer\r\n * @param arrayBuffer : le buffer Г  partir duquel charger l'image\r\n * @return la CompressedImage chargГ©e\r\n */\r\nCompressedImage.prototype._loadDDS = function(arrayBuffer) {\r\n    // Get a view of the arrayBuffer that represents the DDS header.\r\n    var header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n\r\n    // Do some sanity checks to make sure this is a valid DDS file.\r\n    if (header[DDS_HEADER_MAGIC] != DDS_MAGIC)\r\n        throw \"Invalid magic number in DDS header\";\r\n\r\n    if (!header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC)\r\n        throw \"Unsupported format, must contain a FourCC code\";\r\n\r\n    // Determine what type of compressed data the file contains.\r\n    var fourCC = header[DDS_HEADER_PF_FOURCC];\r\n    var internalFormat;\r\n    switch (fourCC) {\r\n        case FOURCC_DXT1:\r\n            internalFormat = COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n            break;\r\n        case FOURCC_DXT3:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n            break;\r\n        case FOURCC_DXT5:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n            break;\r\n        case FOURCC_ATC:\r\n            internalFormat = COMPRESSED_RGB_ATC_WEBGL;\r\n            break;\r\n        case FOURCC_ATCA:\r\n            internalFormat = COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL;\r\n            break;\r\n        case FOURCC_ATCI:\r\n            internalFormat = COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;\r\n            break;\r\n        default:\r\n            throw \"Unsupported FourCC code: \" + int32ToFourCC(fourCC);\r\n    }\r\n\r\n    // Determine how many mipmap levels the file contains.\r\n    var levels = 1;\r\n    if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n        levels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n    }\r\n\r\n    // Gather other basic metrics and a view of the raw the DXT data.\r\n    var width = header[DDS_HEADER_WIDTH];\r\n    var height = header[DDS_HEADER_HEIGHT];\r\n    var dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n    var dxtData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n    return this.init(this.src, dxtData, 'DDS', width, height, levels, internalFormat);\r\n};\r\n\r\n/**\r\n * Charge une image compressГ©e au format PVR depuis un array buffer\r\n * @param arrayBuffer : le buffer Г  partir duquel charger l'image\r\n * @return la CompressedImage chargГ©e\r\n */\r\nCompressedImage.prototype._loadPVR = function(arrayBuffer) {\r\n    // Get a view of the arrayBuffer that represents the DDS header.\r\n    var header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n\r\n    // Do some sanity checks to make sure this is a valid DDS file.\r\n    if (header[PVR_HEADER_MAGIC] != PVR_MAGIC)\r\n        throw \"Invalid magic number in PVR header\";\r\n\r\n    // Determine what type of compressed data the file contains.\r\n    var format = header[PVR_HEADER_FORMAT];\r\n    var internalFormat;\r\n    switch (format) {\r\n        case PVR_FORMAT_2BPP_RGB:\r\n            internalFormat = COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_2BPP_RGBA:\r\n            internalFormat = COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_4BPP_RGB:\r\n            internalFormat = COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_4BPP_RGBA:\r\n            internalFormat = COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n            break;\r\n        case PVR_FORMAT_ETC1:\r\n            internalFormat = COMPRESSED_RGB_ETC1_WEBGL;\r\n            break;\r\n        case PVR_FORMAT_DXT1:\r\n            internalFormat = COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n            break;\r\n        case PVR_FORMAT_DXT3:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n            break;\r\n        case PVR_FORMAT_DXT5:\r\n            internalFormat = COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n            break;\r\n        default:\r\n            throw \"Unsupported PVR format: \" + format;\r\n    }\r\n\r\n    // Gather other basic metrics and a view of the raw the DXT data.\r\n    var width = header[PVR_HEADER_WIDTH];\r\n    var height = header[PVR_HEADER_HEIGHT];\r\n    var levels = header[PVR_HEADER_MIPMAPCOUNT];\r\n    var dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n    var pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\r\n\r\n    return this.init(this.src, pvrtcData, 'PVR', width, height, levels, internalFormat);\r\n};\r\n\r\n\r\n//============================//\r\n// DXT constants and utilites //\r\n//============================//\r\n\r\n// Utility functions\r\n// Builds a numeric code for a given fourCC string\r\nfunction fourCCToInt32(value) {\r\n    return value.charCodeAt(0) +\r\n        (value.charCodeAt(1) << 8) +\r\n        (value.charCodeAt(2) << 16) +\r\n        (value.charCodeAt(3) << 24);\r\n}\r\n\r\n// Turns a fourCC numeric code into a string\r\nfunction int32ToFourCC(value) {\r\n    return String.fromCharCode(\r\n        value & 0xff,\r\n        (value >> 8) & 0xff,\r\n        (value >> 16) & 0xff,\r\n        (value >> 24) & 0xff\r\n    );\r\n}\r\n\r\n// Calcualates the size of a compressed texture level in bytes\r\nfunction textureLevelSize(format, width, height) {\r\n    switch (format) {\r\n        case COMPRESSED_RGB_S3TC_DXT1_EXT:\r\n        case COMPRESSED_RGB_ATC_WEBGL:\r\n        case COMPRESSED_RGB_ETC1_WEBGL:\r\n            return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n\r\n        case COMPRESSED_RGBA_S3TC_DXT3_EXT:\r\n        case COMPRESSED_RGBA_S3TC_DXT5_EXT:\r\n        case COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:\r\n        case COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:\r\n            return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n\r\n        case COMPRESSED_RGB_PVRTC_4BPPV1_IMG:\r\n        case COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:\r\n            return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n\r\n        case COMPRESSED_RGB_PVRTC_2BPPV1_IMG:\r\n        case COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:\r\n            return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n// DXT formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\r\nvar COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\nvar COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\nvar COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\nvar COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n// ATC formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_atc/\r\nvar COMPRESSED_RGB_ATC_WEBGL = 0x8C92;\r\nvar COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;\r\nvar COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;\r\n\r\n// DXT values and structures referenced from:\r\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\nvar DDS_MAGIC = 0x20534444;\r\nvar DDSD_MIPMAPCOUNT = 0x20000;\r\nvar DDPF_FOURCC = 0x4;\r\n\r\nvar DDS_HEADER_LENGTH = 31; // The header length in 32 bit ints.\r\n\r\n// Offsets into the header array.\r\nvar DDS_HEADER_MAGIC = 0;\r\n\r\nvar DDS_HEADER_SIZE = 1;\r\nvar DDS_HEADER_FLAGS = 2;\r\nvar DDS_HEADER_HEIGHT = 3;\r\nvar DDS_HEADER_WIDTH = 4;\r\n\r\nvar DDS_HEADER_MIPMAPCOUNT = 7;\r\n\r\nvar DDS_HEADER_PF_FLAGS = 20;\r\nvar DDS_HEADER_PF_FOURCC = 21;\r\n\r\n// FourCC format identifiers.\r\nvar FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\nvar FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\nvar FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\nvar FOURCC_ATC = fourCCToInt32(\"ATC \");\r\nvar FOURCC_ATCA = fourCCToInt32(\"ATCA\");\r\nvar FOURCC_ATCI = fourCCToInt32(\"ATCI\");\r\n\r\n//===============//\r\n// PVR constants //\r\n//===============//\r\n\r\n// PVR formats, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\r\nvar COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\nvar COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\nvar COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\nvar COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\n// ETC1 format, from:\r\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/\r\nvar COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n\r\nvar PVR_FORMAT_2BPP_RGB = 0;\r\nvar PVR_FORMAT_2BPP_RGBA = 1;\r\nvar PVR_FORMAT_4BPP_RGB = 2;\r\nvar PVR_FORMAT_4BPP_RGBA = 3;\r\nvar PVR_FORMAT_ETC1 = 6;\r\nvar PVR_FORMAT_DXT1 = 7;\r\nvar PVR_FORMAT_DXT3 = 9;\r\nvar PVR_FORMAT_DXT5 = 5;\r\n\r\nvar PVR_HEADER_LENGTH = 13; // The header length in 32 bit ints.\r\nvar PVR_MAGIC = 0x03525650; //0x50565203;\r\n\r\n// Offsets into the header array.\r\nvar PVR_HEADER_MAGIC = 0;\r\nvar PVR_HEADER_FORMAT = 2;\r\nvar PVR_HEADER_HEIGHT = 6;\r\nvar PVR_HEADER_WIDTH = 7;\r\nvar PVR_HEADER_MIPMAPCOUNT = 11;\r\nvar PVR_HEADER_METADATA = 12;\r\n","/**\r\n * Created by Liza on 12.12.2015.\r\n */\r\n\r\nvar core = PIXI,\r\n    CompressedImage = require('./CompressedImage'),\r\n    WebGLManager = core.WebGLManager;\r\n/**\r\n * @class\r\n * @memberof PIXI.compressedTextures\r\n * @extends PIXI.WebGlManager\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this manager works for.\r\n */\r\nfunction CompressedTextureManager(renderer) {\r\n    WebGLManager.call(this, renderer);\r\n}\r\n\r\nCompressedTextureManager.prototype = Object.create(WebGLManager.prototype);\r\nCompressedTextureManager.prototype.constructor = CompressedTextureManager;\r\nmodule.exports = CompressedTextureManager;\r\n\r\ncore.WebGLRenderer.registerPlugin('compressedTextureManager', CompressedTextureManager);\r\n\r\nCompressedTextureManager.prototype.getSupportedExtensions = function () {\r\n    var gl = this.renderer.gl;\r\n    function getExtension(gl, name) {\r\n        var vendorPrefixes = [\"\", \"WEBKIT_\", \"MOZ_\"];\r\n        var ext = null;\r\n        for (var i in vendorPrefixes) {\r\n            ext = gl.getExtension(vendorPrefixes[i] + name);\r\n            if (ext) {\r\n                break;\r\n            }\r\n        }\r\n        return ext;\r\n    }\r\n\r\n    return {\r\n        dxt: getExtension(gl, \"WEBGL_compressed_texture_s3tc\"),\r\n        pvrtc: getExtension(gl, \"WEBGL_compressed_texture_pvrtc\"),\r\n        atc: getExtension(gl, \"WEBGL_compressed_texture_atc\")\r\n    };\r\n};\r\n","var CompressedImage = require('./CompressedImage');\r\nvar GLTexture = PIXI.glCore.GLTexture;\r\n\r\n/**\r\n * @mixin\r\n */\r\nvar GLTextureMixin = {\r\n    uploadNotCompressed: GLTexture.uploadNotCompressed,\r\n    isCompressed: false,\r\n    upload: function(source)\r\n    {\r\n        if (!(source instanceof CompressedImage)) {\r\n            return this.uploadNotCompressed(source);\r\n        }\r\n        this.bind();\r\n\r\n        var gl = this.gl;\r\n\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\r\n\r\n        this.isCompressed = true;\r\n\r\n        source.generateWebGLTexture(gl, true);\r\n    },\r\n\r\n    enableMipmap: function() {\r\n        if (source.isCompressed) {\r\n            return;\r\n        }\r\n        var gl = this.gl;\r\n\r\n        this.bind();\r\n\r\n        this.mipmap = true;\r\n\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n};\r\n\r\nmodule.exports = GLTextureMixin;\r\n","function extensionChooser(supportedExtensions) {\n    supportedExtensions = supportedExtensions || [];\n\n    var imageParser = require('./imageParser')();\n\n    return function (resource, next) {\n        var ext = resource.metadata.choice;\n        if (!ext) {\n            return next();\n        }\n        //let us choose extension!\n        var url = resource.url;\n        if (!resource._defaultUrlChoice) {\n            resource._defaultUrlChoice = url;\n            var k = url.lastIndexOf(\".\");\n            if (k >= 0) {\n                resource._baseUrl = url.substring(0, k);\n            } else {\n                return next();\n            }\n        }\n        for (var i = ext.length - 1; i >= 0; i--) {\n            url = resource._baseUrl + ext[i];\n            var isSupported = false;\n            for (var j = 0; j < supportedExtensions.length; j++) {\n                if (ext[i] === supportedExtensions[j]) {\n                    resource.url = url;\n                    resource.loadType = resource._determineLoadType();\n                    return imageParser(resource, next);\n                }\n            }\n        }\n        return imageParser(resource, next);\n    };\n}\n\nmodule.exports = extensionChooser;\n","var core = PIXI,\r\n    utils = core.utils,\r\n    extensionFixer = require('./CompressedImage');\r\n\r\nfunction textureExtensionFixer(supportedExtensions) {\r\n    return function (resource, next) {\r\n        if (resource.texture && resource._defaultUrlChoice && resource._defaultUrl != resource.url) {\r\n            var texture = resource.texture;\r\n            var baseTexture = texture.baseTexture;\r\n            delete utils.BaseTextureCache[baseTexture.imageUrl];\r\n            delete utils.TextureCache[baseTexture.imageUrl];\r\n            baseTexture.imageUrl = resource._defaultUrlChoice;\r\n            core.utils.BaseTextureCache[baseTexture.imageUrl] = baseTexture;\r\n            core.utils.TextureCache[baseTexture.imageUrl] = texture;\r\n        }\r\n        next();\r\n    };\r\n}\r\n\r\nmodule.exports = textureExtensionFixer;\r\n","var core = PIXI,\n    utils = core.utils,\n    CompressedImage = require('./CompressedImage'),\n    Resource = core.loaders.Resource;\n\nResource.setExtensionXhrType('dds', Resource.XHR_RESPONSE_TYPE.BUFFER);\nResource.setExtensionXhrType('pvr', Resource.XHR_RESPONSE_TYPE.BUFFER);\nResource.setExtensionXhrType('etc1', Resource.XHR_RESPONSE_TYPE.BUFFER);\n\nfunction imageParser() {\n    return function (resource, next) {\n        if (resource.url.indexOf('.dds') != -1 || resource.url.indexOf('.pvr') != -1 || resource.url.indexOf('.etc1') != -1) {\n            var compressedImage = resource.compressedImage || new CompressedImage(resource.url);\n            if (resource.data) {\n                throw \"compressedImageParser middleware must be specified in loader.before() and must have zero resource.data\";\n            }\n            resource.isCompressedImage = true;\n            resource.data = compressedImage;\n            resource.once('complete', function() {\n                resource.isImage = true;\n                compressedImage.loadFromArrayBuffer(resource.data);\n                resource.data = compressedImage;\n            });\n        }\n        next();\n    };\n}\n\nmodule.exports = imageParser;\n","var plugin = {\r\n    CompressedTextureManager: require('./CompressedTextureManager'),\r\n    imageParser: require('./imageParser'),\r\n    extensionChooser: require('./extensionChooser'),\r\n    extensionFixer: require('./extensionFixer'),\r\n    GLTextureMixin: require('./GLTextureMixin'),\r\n    detectExtensions: function (renderer, resolution) {\r\n        var extensions = [];\r\n        if (renderer instanceof PIXI.WebGLRenderer) {\r\n            var data = renderer.plugins.compressedTextureManager.getSupportedExtensions();\r\n            if (data.dxt) extensions.push('.dds');\r\n            if (data.pvrtc) extensions.push('.pvr');\r\n            if (data.atc) extensions.push('.atc');\r\n        } else if (renderer instanceof PIXI.CanvasRenderer) {\r\n            //nothing special for canvas\r\n        }\r\n        //retina or not\r\n        resolution = resolution || renderer.resolution;\r\n        var res = \"@\"+resolution+\"x\";\r\n        var ext = extensions.slice(0);\r\n        while (ext.length > 0) {\r\n            extensions.push(res + ext.pop());\r\n        }\r\n        extensions.push(res + \".png\");\r\n        extensions.push(res + \".jpg\");\r\n        //atlas support @1x @2x @.5x\r\n        extensions.push(res + \".json\");\r\n        extensions.push(res + \".atlas\");\r\n        return extensions;\r\n    }\r\n};\r\n\r\nObject.assign(PIXI.glCore.GLTexture.prototype, plugin.GLTextureMixin);\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(plugin.extensionFixer);\r\nPIXI.loader.use(plugin.extensionFixer());\r\n\r\nmodule.exports = global.PIXI.compressedTextures = plugin;\r\n"],"sourceRoot":"/source/"}